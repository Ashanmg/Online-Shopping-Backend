// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using OS.Infastructures.Core;
using System;

namespace OS.Infastructures.Migrations
{
    [DbContext(typeof(OnlineShoppingDbContext))]
    [Migration("20180527112228_Productattributevalue")]
    partial class Productattributevalue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OS.Entities.AccountUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Active");

                    b.Property<int>("AddressId");

                    b.Property<int>("ContactNumber")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedByUTC");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastLoginUTC");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("AccountUser");
                });

            modelBuilder.Entity("OS.Entities.AccountUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountUserId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("AccountUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountUserRole");
                });

            modelBuilder.Entity("OS.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2")
                        .HasMaxLength(200);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("ModifiedOnUTC");

                    b.Property<int>("ZipPostalCode")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("OS.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUTC");

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedOnUTC");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("OS.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountUserCurrencyCode");

                    b.Property<int>("AccountUserId");

                    b.Property<int>("AddressId");

                    b.Property<int>("AllowStoringCreditCardNumber");

                    b.Property<string>("AuthenticationTransactionCode");

                    b.Property<string>("AuthenticationTransactionId");

                    b.Property<string>("AuthenticationTransactionResult");

                    b.Property<string>("CaptureTransactionId");

                    b.Property<string>("CaptureTransactionResult");

                    b.Property<int>("CardCvv2");

                    b.Property<string>("CardExpirationMonth");

                    b.Property<string>("CardExpirationYear");

                    b.Property<string>("CardName");

                    b.Property<int>("CardNumber");

                    b.Property<string>("CardType");

                    b.Property<DateTime>("CreatedOnUTC");

                    b.Property<decimal>("CurrencyRate");

                    b.Property<int>("MaskedCreditCardNumber");

                    b.Property<decimal>("OrderDiscount");

                    b.Property<string>("OrderStatus");

                    b.Property<decimal>("OrderSubTotal");

                    b.Property<decimal>("OrderSubTotalDiscount");

                    b.Property<decimal>("OrderTotal");

                    b.Property<DateTime>("PaidDateUTC");

                    b.Property<decimal>("PaymentMethodAdditionalFee");

                    b.Property<string>("PaymentMethodSystemName");

                    b.Property<string>("PaymentStatus");

                    b.Property<int>("PickupInStore");

                    b.Property<decimal>("RefundableAmmount");

                    b.Property<int>("StoreId");

                    b.Property<string>("SubscriptionTransactionId");

                    b.HasKey("Id");

                    b.HasIndex("AccountUserId");

                    b.HasIndex("AddressId");

                    b.HasIndex("StoreId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("OS.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("DiscountAmount");

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quentity");

                    b.Property<decimal>("SubTotalPrice");

                    b.Property<decimal>("TotalPrice");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("OS.Entities.OrderNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUTC");

                    b.Property<int>("DisplayToCustomer");

                    b.Property<string>("Note")
                        .HasMaxLength(50);

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderNote");
                });

            modelBuilder.Entity("OS.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUTC");

                    b.Property<string>("ImagePath");

                    b.Property<DateTime>("UpdatedOnUTC");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("OS.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AllowCustomerReview");

                    b.Property<decimal>("ApprovedRatingSum");

                    b.Property<int>("ApprovedTotalReview");

                    b.Property<DateTime>("CreatedOnUTC");

                    b.Property<int>("ManufacturerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PictureId");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductTypeId");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(150);

                    b.Property<int>("ShowOnCategoryPage");

                    b.Property<int>("TaxIncluded");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PictureId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("OS.Entities.Product_ProductAttributeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IsRequired");

                    b.Property<int>("ProductAttributeId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_ProductAttributeMapping");
                });

            modelBuilder.Entity("OS.Entities.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("OS.Entities.ProductAttributeCombination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttributeXml")
                        .HasMaxLength(2147483647);

                    b.Property<int>("AvailableQuentity");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeCombination");
                });

            modelBuilder.Entity("OS.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOnUTC");

                    b.Property<int>("ProductAttributeId");

                    b.Property<string>("ProductValue")
                        .IsRequired();

                    b.Property<string>("ValueDescription")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductAttributeValue");
                });

            modelBuilder.Entity("OS.Entities.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountUserId");

                    b.Property<DateTime>("CreatedOnUTC");

                    b.Property<int>("IsApproved");

                    b.Property<int>("ProductId");

                    b.Property<int>("Rating");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("AccountUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReview");
                });

            modelBuilder.Entity("OS.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Active");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PerentProductTypeId");

                    b.Property<DateTime>("UpdatedOnUTC");

                    b.HasKey("Id");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("OS.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Active");

                    b.Property<int>("FreeShipping");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SystemName")
                        .HasMaxLength(100);

                    b.Property<int>("TaxEnabled");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("OS.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountUserId");

                    b.Property<string>("AttributeXml")
                        .HasMaxLength(2147483647);

                    b.Property<DateTime>("CreatedOnUTC");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("ProductPrice");

                    b.Property<int>("Quentity");

                    b.Property<int>("ShoppingCartTypeId");

                    b.Property<int>("StoreId");

                    b.Property<DateTime>("UpdatedOnUTC");

                    b.HasKey("Id");

                    b.HasIndex("AccountUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("OS.Entities.StockItemMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttributeCombinationId");

                    b.Property<int>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("AttributeCombinationId");

                    b.HasIndex("StoreId");

                    b.ToTable("StockItemMapping");
                });

            modelBuilder.Entity("OS.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<DateTime>("CreatedOnUTC");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("StoreContactNumber");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("OS.Entities.AccountUser", b =>
                {
                    b.HasOne("OS.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.AccountUserRole", b =>
                {
                    b.HasOne("OS.Entities.AccountUser")
                        .WithMany("AccountUserRoles")
                        .HasForeignKey("AccountUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OS.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.Order", b =>
                {
                    b.HasOne("OS.Entities.AccountUser", "User")
                        .WithMany()
                        .HasForeignKey("AccountUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OS.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OS.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.OrderItem", b =>
                {
                    b.HasOne("OS.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OS.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.OrderNote", b =>
                {
                    b.HasOne("OS.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.Product", b =>
                {
                    b.HasOne("OS.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OS.Entities.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OS.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.Product_ProductAttributeMapping", b =>
                {
                    b.HasOne("OS.Entities.ProductAttribute", "ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OS.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.ProductAttributeCombination", b =>
                {
                    b.HasOne("OS.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("OS.Entities.ProductAttribute", "ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.ProductReview", b =>
                {
                    b.HasOne("OS.Entities.AccountUser", "AccountUser")
                        .WithMany()
                        .HasForeignKey("AccountUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OS.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("OS.Entities.AccountUser", "User")
                        .WithMany()
                        .HasForeignKey("AccountUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OS.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OS.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.StockItemMapping", b =>
                {
                    b.HasOne("OS.Entities.ProductAttributeCombination", "AttributeCombination")
                        .WithMany()
                        .HasForeignKey("AttributeCombinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OS.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OS.Entities.Store", b =>
                {
                    b.HasOne("OS.Entities.Address", "Addresse")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
